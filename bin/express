#!/usr/bin/env node

var os = require('os'),
    eol = os.EOL;
var fs = require('fs');
var path = require('path'),
    join = path.join;

var program = require('commander');
var mkdirp = require('mkdirp');
var readline = require('readline');
var sortedObject = require('sorted-object');
var _exit = process.exit;
var pkg = require('../package.json');
var version = pkg.version;

// Re-assign process.exit because of commander
// TODO: Switch to a different command framework
process.exit = exit

// CLI

before(program, 'outputHelp', function () {
  this.allowUnknownOption();
});

program
  .version(version)
  .usage('[options] [dir]')
  .option('-e, --ejs', 'add ejs engine support (defaults to swig)')
  .option('    --hbs', 'add handlebars engine support')
  .option('-H, --hogan', 'add hogan.js engine support')
  .option('-c, --css <engine>', 'initial stylesheet (less|stylus|scss|css) (defaults to scss)')
  .option('-f, --force', 'force on non-empty directory')
  .parse(process.argv);

if (!exit.exited) {
  main();
}

/**
 * Install a before function; AOP.
 */

function before(obj, method, fn) {
  var old = obj[method];

  obj[method] = function () {
    fn.call(this);
    old.apply(this, arguments);
  };
}

/**
 * Prompt for confirmation on STDOUT/STDIN
 */

function confirm(msg, callback) {
  var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  rl.question(msg, function (input) {
    rl.close();
    callback(/^y|yes|ok|true$/i.test(input));
  });
}

/**
 * Create application at the given directory `path`.
 *
 * @param {String} app_name
 * @param {String} path
 */

function createApplication(app_name, path) {
  var wait = 7;

  console.log();
  function complete() {
    if (--wait) return;
    var prompt = launchedFromCmd() ? '>' : '$';

    console.log();
    console.log('   install dependencies:');
    console.log('     %s cd %s && npm install', prompt, path);
    console.log();
    console.log('   stack up front-end bundles:');
    console.log('     %s npm run appstack', prompt);
    console.log();
    console.log('   run the app:');
    console.log('     %s npm run bsync', prompt);
    console.log();
  }

  /// load templated files

  // JavaScript
  var app = loadTemplate('js/app.js');
  var stacks = loadTemplate('js/stacks.js');
  var www = loadTemplate('js/www');
  var config = loadTemplate('js/config.js');
  var index = loadTemplate('js/routes/index.js');

  // CSS
  var css = loadTemplate('css/style.css');
  var less = loadTemplate('css/style.less');
  var stylus = loadTemplate('css/style.styl');
  var scss = loadTemplate('css/style.scss');

  // rc files
  var gitignore = loadTemplate('rc/gitignore');
  var npmignore = loadTemplate('rc/npmignore');

  mkdir(path, function(){
    mkdir(path + '/public');
    mkdir(path + '/client/site', function(){
      switch (program.css) {
        case 'less':
          write(path + '/client/site/style.less', less);
          break;
        case 'stylus':
          write(path + '/client/site/style.styl', stylus);
          break;
        case 'css':
          write(path + '/client/site/style.css', css);
          break;
        default:
          write(path + '/client/site/style.scss', scss);
      }
      complete();
    });

    mkdir(path + '/routes', function(){
      write(path + '/routes/index.js', index);
      complete();
    });

    mkdir(path + '/views', function(){
      switch (program.template) {
        case 'ejs':
          copy_template('ejs/index.ejs', path + '/views/index.ejs');
          copy_template('ejs/error.ejs', path + '/views/error.ejs');
          break;
        case 'swig':
          copy_template('swig/index.swig', path + '/views/index.swig');
          copy_template('swig/error.swig', path + '/views/error.swig');
          mkdir(join(path, 'views', 'base'), function() {
            copy_template('swig/base.swig', path + '/views/base/base.swig');
            complete();
          });
          break;
        case 'hjs':
          copy_template('hogan/index.hjs', path + '/views/index.hjs');
          copy_template('hogan/error.hjs', path + '/views/error.hjs');
          break;
        case 'hbs':
          copy_template('hbs/index.hbs', path + '/views/index.hbs');
          copy_template('hbs/layout.hbs', path + '/views/layout.hbs');
          copy_template('hbs/error.hbs', path + '/views/error.hbs');
          break;
      }
      complete();
    });

    // CSS Engine support
    switch (program.css) {
      case 'less':
        stacks = stacks.replace('{css}', 'less');
        break;
      case 'stylus':
        stacks = stacks.replace('{css}', 'styl');
        break;
      case 'css':
        stacks = stacks.replace('{css}', 'css');
        break;
      default:
        // scss
        stacks = stacks.replace('{css}', 'scss');
    }

    // Template support
    app = app.replace('{views}', program.template);



    // package.json
    var pkg = {
        name: app_name
      , version: '0.0.0'
      , private: true
      , scripts: {
        start: 'DEBUG='+ app_name +':* node ./bin/www',
        appbuild: 'appbuild',
        appstack: 'appstack',
        appwatch: 'appwatch --server 0.0.0.0:3000',
        bsync: 'npm start & npm run appwatch'
      }
      , browserify: {
          transform: [
            'envify'
          ]
      }
      , dependencies: {
          'express': '^4.13.4',
          'body-parser': '^1.13.2',
          'cookie-parser': '^1.3.5',
          'debug': '^2.2.0',
          'morgan': '^1.6.1',
          'serve-favicon': '^2.3.0',
          'domain-http-server': '^1.0.0',
          'compression': '^1.5.1'
      }
      , devDependencies: {
        'animate.css': '^3.4.0',
        'appstackr': '^0.3.16',
        'react': '^0.14.7',
        'react-dom': 'benpptung/react-dom',
        'react-addons-css-transition-group': 'benpptung/react-addons-css-transition-group',
        'react-addons-update': 'benpptung/react-addons-update',
        'react-addons-transition-group': 'benpptung/react-addons-transition-group',
        'react-addons-shallow-compare': 'benpptung/react-addons-shallow-compare',
        'react-addons-pure-render-mixin': 'benpptung/react-addons-pure-render-mixin',
        'react-addons-linked-state-mixin': 'benpptung/react-addons-linked-state-mixin',
        'react-addons-clone-with-props': 'benpptung/react-addons-clone-with-props',
        'react-addons-create-fragment': 'benpptung/react-addons-create-fragment',
        'mocha': '^2.2.5',
        'envify': '^3.4.0',
        'expect.js': '^0.3.1',
        'supertest': '^1.0.1',
        'html5shiv': '^3.7.2',
        'respond.js': '^1.4.2',
        'superagent': '^1.2.0',
        'es5-shim': '^4.1.9',
        'console-polyfill': '^0.2.1'
      }
    };

    if (launchedFromCmd()) {
      pkg.scripts.start = 'SET DEBUG=' + app_name + ':* & node ./bin/www';
    }

    switch (program.template) {
      case 'swig':
        pkg.dependencies['swig'] = 'git://github.com/benpptung/swig';
        app = app.replace('{swig.require}', eol + 'var swig = require(\'swig\');');
        app = app.replace('{swig.cache}', eol + '  swig.setDefaults({cache: false});');
        break;
      case 'ejs':
        pkg.dependencies['ejs'] = '~2.3.3';
        app = app.replace('{swig.require}', '');
        app = app.replace('{swig.cache}', '');
        break;
      case 'hjs':
        pkg.dependencies['hjs'] = '~0.0.6';
        app = app.replace('{swig.require}', '');
        app = app.replace('{swig.cache}', '');
        break;
      case 'hbs':
        pkg.dependencies['hbs'] = '~3.1.0';
        app = app.replace('{swig.require}', '');
        app = app.replace('{swig.cache}', '');
        break;
      default:
    }

    // sort dependencies like npm(1)
    pkg.dependencies = sortedObject(pkg.dependencies);

    // write files
    write(path + '/package.json', JSON.stringify(pkg, null, 2));
    write(path + '/app.js', app);
    mkdir(path + '/config', function() {
      write(path + '/config/index.js', config);
      complete();
    });
    mkdir(path + '/bin', function(){
      www = www.replace('{name}', app_name);
      write(path + '/bin/www', www, 0755);
      complete();
    });
    write(join(path, 'stacks.js'), stacks);
    write(join(path, '.gitignore'), gitignore);
    write(join(path, '.npmignore'), npmignore);

    complete();
  });
}

function copy_template(from, to) {
  from = path.join(__dirname, '..', 'templates', from);
  write(to, fs.readFileSync(from, 'utf-8'));
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */

function emptyDirectory(path, fn) {
  fs.readdir(path, function(err, files){
    if (err && 'ENOENT' != err.code) throw err;
    fn(!files || !files.length);
  });
}

/**
 * Graceful exit for async STDIO
 */

function exit(code) {
  // flush output for Node.js Windows pipe bug
  // https://github.com/joyent/node/issues/6247 is just one bug example
  // https://github.com/visionmedia/mocha/issues/333 has a good discussion
  function done() {
    if (!(draining--)) _exit(code);
  }

  var draining = 0;
  var streams = [process.stdout, process.stderr];

  exit.exited = true;

  streams.forEach(function(stream){
    // submit empty write request and wait for completion
    draining += 1;
    stream.write('', done);
  });

  done();
}

/**
 * Determine if launched from cmd.exe
 */

function launchedFromCmd() {
  return process.platform === 'win32'
    && process.env._ === undefined;
}

/**
 * Load template file.
 */

function loadTemplate(name) {
  return fs.readFileSync(path.join(__dirname, '..', 'templates', name), 'utf-8');
}

/**
 * Main program.
 */

function main() {
  // Path
  var destinationPath = program.args.shift() || '.';

  // App name
  var appName = path.basename(path.resolve(destinationPath));

  // Template engine
  program.template = 'swig';
  if (program.ejs) program.template = 'ejs';
  if (program.hogan) program.template = 'hjs';
  if (program.hbs) program.template = 'hbs';

  // Generate application
  emptyDirectory(destinationPath, function (empty) {
    if (empty || program.force) {
      createApplication(appName, destinationPath);
    } else {
      confirm('destination is not empty, continue? [y/N] ', function (ok) {
        if (ok) {
          process.stdin.destroy();
          createApplication(appName, destinationPath);
        } else {
          console.error('aborting');
          exit(1);
        }
      });
    }
  });
}

/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 */

function write(path, str, mode) {
  fs.writeFileSync(path, str, { mode: mode || 0666 });
  console.log('   \x1b[36mcreate\x1b[0m : ' + path);
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */

function mkdir(path, fn) {
  mkdirp(path, 0755, function(err){
    if (err) throw err;
    console.log('   \033[36mcreate\033[0m : ' + path);
    fn && fn();
  });
}
